name: Infrastructure CI/CD

permissions:
  id-token: write  # required for requesting the JWT
  contents: read  # required for actions/checkout

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deployment_environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - test

jobs:
  cdk_operations:
    name: "cdk operations"
    runs-on: ubuntu-latest
    
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.deployment_environment || 'synthtest' }}
    
    env:
      author: ${{ github.actor }}
      bastion_host_ipv4_allow_list: ${{ vars.bastion_host_ipv4_allow_list }}
      certificate_arn: ${{ vars.certificate_arn }}
      commit_sha: ${{ github.sha }}
      db_allocated_storage: ${{ vars.db_allocated_storage }}
      db_instance_type: ${{ vars.db_instance_type }}
      git_repository: ${{ github.repository }}
      ingestor_domain_name: ${{ vars.ingestor_domain_name }}
      mosaic_host: ${{ vars.mosaic_host }}
      pgstac_version: ${{ vars.pgstac_version }}
      stac_api_custom_domain_name: ${{ vars.stac_api_custom_domain_name }}
      stac_api_integration_api_arn: ${{ vars.stac_api_integration_api_arn }}
      stac_browser_certificate_arn: ${{ vars.stac_browser_certificate_arn }}
      stac_browser_custom_domain_name: ${{ vars.stac_browser_custom_domain_name }}
      stac_browser_repo_tag: ${{ vars.stac_browser_repo_tag }}
      stage: ${{ github.event.inputs.deployment_environment || 'synthtest' }}
      titiler_data_access_role_arn: ${{ vars.titiler_data_access_role_arn }}
      titiler_pgstac_api_custom_domain_name: ${{ vars.titiler_pgstac_api_custom_domain_name }}
      web_acl_arn: ${{ vars.web_acl_arn }}
    
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: set up node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: install dependencies
        run: npm ci

      - name: assume github oidc role
        uses: aws-actions/configure-aws-credentials@v4
        if: github.event_name == 'workflow_dispatch'
        with:
          aws-region: us-west-2
          role-to-assume: ${{ vars.deploy_role }}
          role-session-name: maap-eoapi-${{ github.event.inputs.deployment_environment || 'synthtest' }}-deploy

      - name: import stacks variables to github output
        id: import-stacks-vars-to-output
        if: github.event_name == 'workflow_dispatch'
        env:
          auth_stack_name: ${{ vars.auth_stack_name }}
          roles_stack_name: ${{ vars.roles_stack_name }}
        run: bash .github/workflows/scripts/import_stacks_variables_to_github_output.sh $auth_stack_name $roles_stack_name

      - name: set dynamic environment variables
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "ingestor_data_access_role_arn=${{ steps.import-stacks-vars-to-output.outputs.ingestor_data_access_role_arn }}" >> $github_env
          echo "jwks_url=${{ steps.import-stacks-vars-to-output.outputs.jwks_url }}" >> $github_env
      
      - name: set fallback dynamic variables for synthtest
        if: github.event_name != 'workflow_dispatch'
        run: |
          echo "ingestor_data_access_role_arn=${{ vars.ingestor_data_access_role_arn }}" >> $github_env
          echo "jwks_url=${{ vars.jwks_url }}" >> $github_env

      - name: run cdk synth
        run: npm run cdk -- synth

      - name: run cdk deploy
        if: github.event_name == 'workflow_dispatch'
        run: npm run cdk -- deploy --all --require-approval never
