name: Infrastructure CI/CD

permissions:
  id-token: write  # required for requesting the JWT
  contents: read  # required for actions/checkout

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deployment_environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - test

jobs:
  cdk_operations:
    name: "CDK Operations"
    runs-on: ubuntu-latest
    
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.deployment_environment || 'synthtest' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Only assume role for actual deployments, not for synthtest
      - name: Assume Github OIDC role
        uses: aws-actions/configure-aws-credentials@v4
        if: github.event_name == 'workflow_dispatch'
        with:
          aws-region: us-west-2
          role-to-assume: ${{ vars.DEPLOY_ROLE }}
          role-session-name: MAAP-eoapi-${{ github.event.inputs.deployment_environment || 'synthtest' }}-deploy

      - name: Import stacks variables to github output
        id: import-stacks-vars-to-output
        if: github.event_name == 'workflow_dispatch'
        env:
          AUTH_STACK_NAME: ${{ vars.AUTH_STACK_NAME }}
          ROLES_STACK_NAME: ${{ vars.ROLES_STACK_NAME }}
        run: bash .github/workflows/scripts/import_stacks_variables_to_github_output.sh $AUTH_STACK_NAME $ROLES_STACK_NAME

      - name: Set environment variables
        id: set-env
        run: |
          echo "AUTHOR=${{ github.actor }}" >> $GITHUB_ENV
          echo "BASTION_HOST_IPV4_ALLOW_LIST=${{ vars.BASTION_HOST_IPV4_ALLOW_LIST }}" >> $GITHUB_ENV
          echo "CERTIFICATE_ARN=${{ vars.CERTIFICATE_ARN }}" >> $GITHUB_ENV
          echo "COMMIT_SHA=${{ github.sha }}" >> $GITHUB_ENV
          echo "DB_ALLOCATED_STORAGE=${{ vars.DB_ALLOCATED_STORAGE }}" >> $GITHUB_ENV
          echo "DB_INSTANCE_TYPE=${{ vars.DB_INSTANCE_TYPE }}" >> $GITHUB_ENV
          echo "GIT_REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
          echo "INGESTOR_DOMAIN_NAME=${{ vars.INGESTOR_DOMAIN_NAME }}" >> $GITHUB_ENV
          echo "MOSAIC_HOST=${{ vars.MOSAIC_HOST }}" >> $GITHUB_ENV
          echo "PGSTAC_VERSION=${{ vars.PGSTAC_VERSION }}" >> $GITHUB_ENV
          echo "STAC_API_CUSTOM_DOMAIN_NAME=${{ vars.STAC_API_CUSTOM_DOMAIN_NAME }}" >> $GITHUB_ENV
          echo "STAC_API_INTEGRATION_API_ARN=${{ vars.STAC_API_INTEGRATION_API_ARN }}" >> $GITHUB_ENV
          echo "STAC_BROWSER_CERTIFICATE_ARN=${{ vars.STAC_BROWSER_CERTIFICATE_ARN }}" >> $GITHUB_ENV
          echo "STAC_BROWSER_CUSTOM_DOMAIN_NAME=${{ vars.STAC_BROWSER_CUSTOM_DOMAIN_NAME }}" >> $GITHUB_ENV
          echo "STAC_BROWSER_REPO_TAG=${{ vars.STAC_BROWSER_REPO_TAG }}" >> $GITHUB_ENV
          echo "STAGE=${{ github.event.inputs.deployment_environment || 'synthtest' }}" >> $GITHUB_ENV
          echo "TITILER_DATA_ACCESS_ROLE_ARN=${{ vars.TITILER_DATA_ACCESS_ROLE_ARN }}" >> $GITHUB_ENV
          echo "TITILER_PGSTAC_API_CUSTOM_DOMAIN_NAME=${{ vars.TITILER_PGSTAC_API_CUSTOM_DOMAIN_NAME }}" >> $GITHUB_ENV
          echo "WEB_ACL_ARN=${{ vars.WEB_ACL_ARN }}" >> $GITHUB_ENV
          
          # Variables that depend on the output of import-stacks-vars-to-output
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "INGESTOR_DATA_ACCESS_ROLE_ARN=${{ steps.import-stacks-vars-to-output.outputs.INGESTOR_DATA_ACCESS_ROLE_ARN }}" >> $GITHUB_ENV
            echo "JWKS_URL=${{ steps.import-stacks-vars-to-output.outputs.JWKS_URL }}" >> $GITHUB_ENV
          else
            echo "INGESTOR_DATA_ACCESS_ROLE_ARN=${{ vars.INGESTOR_DATA_ACCESS_ROLE_ARN }}" >> $GITHUB_ENV
            echo "JWKS_URL=${{ vars.JWKS_URL }}" >> $GITHUB_ENV
          fi

      - name: Run CDK synth
        run: npm run cdk -- synth

      - name: Run CDK deploy
        if: github.event_name == 'workflow_dispatch'
        run: npm run cdk -- deploy --all --require-approval never
